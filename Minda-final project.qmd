---
title: Final_Project
date: 2024-10-04
format: pdf
---


Population Data Processing
```{r}
# Load required libraries
library(readxl)
library(tidyr)
library(dplyr)
library(httr2)
library(tidyverse)
library(janitor)
library(lubridate)
library(jsonlite)


file_path <- "NST-EST2024-POP.xlsx"

data <- read_excel(file_path, sheet = "NST-EST2024-POP", skip = 3)

colnames(data) <- c("Geographic_Area", "Base_2020", "2020", "2021", "2022", "2023", "2024")

data <- data |>
  filter(!is.na(Geographic_Area)) |>
  filter(str_starts(Geographic_Area, "\\.")) |> 
  mutate(Geographic_Area = str_replace(Geographic_Area, "^\\.", "")) |>
  select(-Base_2020) # Drop the Base_2020 column

population <- data |>
  pivot_longer(cols = starts_with("20"), 
               names_to = "year", 
               values_to = "population") |>
  rename(state_name = Geographic_Area) |>
                mutate(state = case_when(
                state_name == "District of Columbia" ~ "DC",
                state_name == "Puerto Rico" ~ "PR",
                TRUE ~ state.abb[match(state_name, state.name)]  # Use state.abb for other states
              ))


population_filtered <- population |>
  mutate(state_name = reorder(state_name, population)) |>
  ggplot(aes(x = population, y = state_name, fill = year)) +
  geom_col() +
  coord_flip() +
  facet_wrap(~year, scales = "free_y") +
  labs(title = "State Populations for 2021 and 2022",
       x = "Population",
       y = "State") +
  theme_minimal()  +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(population_filtered)


```

Population Processing 

```{r}

url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url, simplifyDataFrame = FALSE)
regions <- map_df(regions, function(x) 
  data.frame(region=x$region, region_name = x$region_name, state_name = x$states))
regions$region_name <- gsub("New York and New Jersey, Puerto Rico, Virgin Islands", "NY & NJ & PR & VI",regions$region_name)

population <- population |>
  left_join(regions, by = "state_name")

print(population) 




```


case processing
```{r}

api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
response <- request(api) |> 
  req_url_query(`$limit` = 10000000000) |>
  req_perform()                       

cases_raw <- response |> 
  resp_body_json(simplifyVector = TRUE) |> 
  as_tibble()

print(cases_raw)

cases_clean <- cases_raw |> 
  select(state, end_date, new_cases) |>             
  rename(date = end_date, cases = new_cases) |>     
  mutate(
    cases = as.numeric(cases),                     
    date = as.Date(date)                         
  )

death_clean <- cases_raw |> 
  select(state, end_date, new_deaths) |>             
  rename(date = end_date, deaths = new_deaths) |>     
  mutate(
    deaths = as.numeric(deaths),                     
    date = as.Date(date)                         
  )


print(cases_clean)
print(death_clean)




```


Join
```{r}

cases <- cases_clean |>
  left_join(population, by = "state") |>            
  mutate(cases_per_100k = (cases / population) * 100000) |> 
  filter(!is.na(cases_per_100k))   

cases <- cases |>
  mutate(date_year = lubridate::year(as.Date(date))) |> 
  filter(date_year == year) 

death <- death_clean |>
  left_join(population, by = "state") |>            
  mutate(deaths_per_100k = (deaths / population) * 100000) |> 
  filter(!is.na(deaths_per_100k)) 

death <- death |>
  mutate(date_year = lubridate::year(as.Date(date))) |> 
  filter(date_year == year) 


ggplot(cases, aes(x = date, y = cases_per_100k, color = state_name)) +
  geom_line() +                                           
  facet_wrap(~ region_name, scales = "free_y") +         
  labs(
    x = "Date",
    y = "Cases per 100,000",
    color = "State"
  ) +
  theme_minimal() +
    theme(
    legend.position = "bottom",                          
    legend.key.size = unit(0.2, "cm"),                    
    legend.text = element_text(size = 7),                
    axis.text.x = element_text(angle = 45, hjust = 1)     
  )

```
Wave
```{r}
library(ggplot2)
library(dplyr)
library(patchwork)

deaths <- death |> mutate(deaths = ifelse(deaths < 0, NA, deaths))
cases <- cases |> mutate(date = as.Date(date))
deaths <- deaths |> mutate(date = as.Date(date))


# Identity wave period
results <- deaths |>
  left_join(cases, by = "date") |>
  mutate(period = case_when(
    date >= as.Date("2020-03-15") & date <= as.Date("2020-06-01") ~ "Wave1",
    date >= as.Date("2020-06-15") & date <= as.Date("2020-10-01") ~ "Wave2",
    date >= as.Date("2020-11-15") & date <= as.Date("2021-04-15") ~ "Wave3",
    date >= as.Date("2021-07-15") & date <= as.Date("2021-10-30") ~ "Wave4",
    date >= as.Date("2021-12-01") & date <= as.Date("2022-04-01") ~ "Wave5",
    date >= as.Date("2021-05-15") & date <= as.Date("2022-10-01") ~ "Wave6"
  )) |> 
  filter(!is.na(period)) |>
  group_by(period) |> 
  summarise(
    peak_death = max(deaths, na.rm = TRUE),              
    peak_date_death = date[which.max(deaths)],           
    peak_cases = max(cases, na.rm = TRUE),                 
    peak_date_cases = date[which.max(cases)]           
  )

# Print the results
print(results)

print(results)

```

```{r}
library(ggplot2)
library(dplyr)
library(patchwork)

cases_plot <- ggplot(cases, aes(x = date, y = cases)) +
  geom_line(color = "blue", size = 1) +
  labs(
    title = "COVID-19 Cases Trend (2020-2024)",
    x = "Date",
    y = "Total COVID-19 Cases"
  ) +
  theme_minimal() + 
  theme(plot.title = element_text(hjust = 0.5))

deaths_plot <- ggplot(deaths, aes(x = date, y = deaths)) +
  geom_line(color = "#FF69B4", size = 1) +
  labs(
    title = "COVID-19 Mortality Trend (2020-2024)",
    x = "Date",
    y = "Total COVID-19 Mortality"
  ) +
  theme_minimal() + 
  theme(plot.title = element_text(hjust = 0.5))

# Define time periods for waves
time_periods <- data.frame(
  period = c("Wave1", "Wave2", "Wave3", "Wave4", "Wave5", "Wave6"),
  start_date = as.Date(c("2020-03-15", "2020-06-15", "2020-11-15", "2021-07-15", "2021-12-01", "2022-05-15")),
  end_date = as.Date(c("2020-06-01", "2020-10-01", "2021-04-15", "2021-10-30", "2022-04-01", "2022-10-01"))
)

# Add dashed rectangules
deaths_plot <- deaths_plot +
  geom_rect(
    data = time_periods,
    aes(
      xmin = start_date,
      xmax = end_date,
      ymin = 0,
      ymax = 4000,
      color = period
    ),
    fill = NA,
    size = 0.9,
    inherit.aes = FALSE
  ) +
  scale_color_manual(
    values = c(
      "Wave1" = "#87CEEB",
      "Wave2" = "#ff7f0e", 
      "Wave3" = "#2ca02c",
      "Wave4" = "#17becf",
      "Wave5" = "#FFD700",
      "Wave6" = "brown"
    ),
    name = "Time Periods"
  ) +
  theme(
    legend.title = element_text(size = 12, face = "plain"),  
    legend.text = element_text(size = 10),                
    legend.key.size = unit(0.8, "cm"),           
    legend.spacing.y = unit(0.3, "cm"),                 
  )

cases_plot <- cases_plot +
  geom_rect(
    data = time_periods,
    aes(
      xmin = start_date,
      xmax = end_date,
      ymin = 0,
      ymax = 8*10**5,
      color = period
    ),
    fill = NA,
    size = 0.9,
    inherit.aes = FALSE
  ) +
  scale_color_manual(
    values = c(
      "Wave1" = "#87CEEB",
      "Wave2" = "#ff7f0e", 
      "Wave3" = "#2ca02c",
      "Wave4" = "#17becf",
      "Wave5" = "#FFD700",
      "Wave6" = "brown"
    ),
    name = "Time Periods"
  ) +
  theme(
    legend.title = element_text(size = 12, face = "plain"),  
    legend.text = element_text(size = 10),                
    legend.key.size = unit(0.8, "cm"),           
    legend.spacing.y = unit(0.3, "cm"),                 
  )

combined_plot <- cases_plot / deaths_plot
print(combined_plot)

anomalies <- deaths %>% filter(deaths < 0)
#print(anomalies)


```



Question2

Supplementary plots

```{r}


library(ggplot2)
library(dplyr)

deaths <- deaths |> mutate(date = as.Date(date))

deaths <- deaths |> mutate(deaths_per_100k = ifelse(deaths_per_100k < 0, 0, deaths_per_100k))

deaths <- deaths |>
  mutate(
    major_region = case_when(
      region_name %in% c("New England", "Mid-Atlantic", "NY & NJ & PR & VI") ~ "Northeast",
      region_name %in% c("Southeast", "South Central") ~ "South",
      region_name %in% c("Pacific", "Pacific Northwest", "Mountain States") ~ "West",
      region_name %in% c("Midwest", "Central Plains") ~ "Midwest",
      TRUE ~ "Other"
    )
  )

regions2 <- c("Northeast", "South", "West", "Midwest")

for (i in regions2) {
  region_data <- deaths |> filter(major_region == i)
  
  p <- ggplot(region_data, aes(x = date, y = deaths_per_100k, color = state_name)) +
    geom_line(size = 1, alpha = 0.8) +
    labs(
      title = paste("Deaths per 100,000 in", i, "(2020-2024)"),
      x = "Date",
      y = "Deaths per 100,000",
      color = "State"
    ) +
    theme_minimal() +
    scale_x_date(date_breaks = "6 months", date_labels = "%b %Y")
  
  print(p)
}



```

Supplementary plots for average death rate for each state
```{r}
deaths_table <- deaths |> 
  mutate(date = as.Date(date)) |> 
  mutate(deaths_per_100k = ifelse(deaths_per_100k < 0, 0, deaths_per_100k)) |> 
  mutate(
    wave = case_when(
      date >= as.Date("2020-03-15") & date <= as.Date("2020-06-01") ~ "Wave1",
      date >= as.Date("2020-06-15") & date <= as.Date("2020-10-01") ~ "Wave2",
      date >= as.Date("2020-11-15") & date <= as.Date("2021-04-15") ~ "Wave3",
      date >= as.Date("2021-07-15") & date <= as.Date("2021-10-30") ~ "Wave4",
      date >= as.Date("2021-12-01") & date <= as.Date("2022-04-01") ~ "Wave5",
      date >= as.Date("2021-05-15") & date <= as.Date("2022-10-01") ~ "Wave6",
      TRUE ~ NA_character_
    )
  )

deaths_table <- deaths_table |> filter(!is.na(wave))

state_wave_summary <- deaths_table |> 
  group_by(state_name, wave) |> 
  summarise(
    peak_death_rate = max(deaths_per_100k, na.rm = TRUE),  
    avg_death_rate = mean(deaths_per_100k, na.rm = TRUE),  # Average death rate
    total_deaths = sum(deaths, na.rm = TRUE),          
    .groups = "drop"
  )


state_wave_summary <- state_wave_summary |> 
  group_by(wave) |> 
  mutate(
    rank_peak = rank(-peak_death_rate),  
    rank_avg = rank(-avg_death_rate),  
    rank_total = rank(-total_deaths)  
  ) |> 
  ungroup()

# Print summary table
print(state_wave_summary)

top_states_peak <- state_wave_summary |> 
  group_by(wave) |> 
  slice_min(rank_peak, n = 5) |> 
  ungroup()

top_5_avg_rank <- state_wave_summary |> 
  group_by(wave) |> 
  slice_min(order_by = rank_avg, n = 5) |> 
  ungroup()

ggplot(top_5_avg_rank, aes(x = reorder(state_name, rank_avg), y = avg_death_rate, fill = wave)) +
  geom_col() +
  facet_wrap(~wave, scales = "free") +
  labs(
    title = "Top 5 States by Average Death Rate During Each Wave",
    x = "State",
    y = "Average Death Rate (per 100,000)"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  )
```
```{r}
# Filter to include only the bottom 5 states by average death rate for each wave
bottom_5_avg_rank <- state_wave_summary |> 
  group_by(wave) |> 
  slice_max(order_by = rank_avg, n = 5) |>  # Select states with the highest rank_avg (lowest average death rate)
  ungroup()

# Plot lowest 5 states by average death rate for each wave
ggplot(bottom_5_avg_rank, aes(x = reorder(state_name, avg_death_rate), y = avg_death_rate, fill = wave)) +
  geom_col() +
  facet_wrap(~wave, scales = "free") +
  labs(
    title = "Lowest 5 States by Average Death Rate During Each Wave",
    x = "State",
    y = "Average Death Rate (per 100,000)"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  )

```

Main Table - do not need to put in the report
```
top_and_bottom_5_table <- state_wave_summary |> 
  group_by(wave) |> 
  slice_min(order_by = rank_avg, n = 5) |>  # Top 5 states (highest average death rate)
  mutate(category = "Top 5 (Highest)") |>  # Add category for top 5
  bind_rows(
    state_wave_summary |> 
      group_by(wave) |> 
      slice_max(order_by = rank_avg, n = 5) |>  # Lowest 5 states (lowest average death rate)
      mutate(category = "Bottom 5 (Lowest)")  # Add category for bottom 5
  ) |> 
  ungroup() |> 
  arrange(wave, category, rank_avg)  # Sort by wave, category, and rank

# Print the table
print(top_and_bottom_5_table)

```

```{r}
top_and_bottom_5_avg_rank <- state_wave_summary |> 
  group_by(wave) |> 
  slice_min(order_by = rank_avg, n = 5) |>  # States with the smallest rank_avg are "top" (lowest rank number)
  mutate(rank_category = "Worst 5 (Highest)") |> 
  bind_rows(
    state_wave_summary |> 
      group_by(wave) |> 
      slice_max(order_by = rank_avg, n = 5) |>  # States with the largest rank_avg are "bottom"
      mutate(rank_category = "Best 5 (Lowest)")
  ) |> 
  ungroup() |> 
  arrange(wave, rank_category, rank_avg)
```



```{r}
library(tidytext)

ggplot(top_and_bottom_5_avg_rank, aes(x = reorder_within(state_name, avg_death_rate, wave), 
                                      y = avg_death_rate, 
                                      fill = rank_category)) +
  geom_col() +
  facet_wrap(~wave, scales = "free") +
  scale_x_reordered() +
  scale_fill_manual(
    values = c("Worst 5 (Highest)" = "#FF69B4", "Best 5 (Lowest)" = "blue"),
    name = "Category"
  ) +
  labs(
    title = "Best and Worst 5 States by Average Death Rate During Each Wave",
    x = "State",
    y = "Average Death Rate (per 100,000)"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text.y = element_text(size = 10),
    legend.position = "bottom",
    strip.text = element_text(size = 10, face = "bold"),
    plot.title = element_text(size = 12, face = "bold", hjust = 0.5)
  )

```


Question3

```{r}
library(dplyr)
library(lubridate)

wave_definitions <- tibble(
  wave = c("Wave1", "Wave2", "Wave3", "Wave4", "Wave5", "Wave6"),
 start_date = as.Date(c("2020-03-15", "2020-06-15", "2020-11-15", "2021-07-15", "2021-12-01", "2022-05-15")),
  end_date = as.Date(c("2020-06-01", "2020-10-01", "2021-04-15", "2021-10-30", "2022-04-01", "2022-10-01"))
)

add_wave <- function(df, wave_df) {
  df %>%
    rowwise() %>%
    mutate(wave = {
      inds <- which(date >= wave_df$start_date & date <= wave_df$end_date)
      if (length(inds) == 1) {
        wave_df$wave[inds]
      } else {
        NA_character_  
      }
    }) %>%
    ungroup()
}

cases_with_wave <- add_wave(cases, wave_definitions)
deaths_with_wave <- add_wave(deaths, wave_definitions)


cases_with_wave <- cases_with_wave %>%
  select(date, wave, cases_per_100k) %>%
  rename(value = cases_per_100k) %>%
  mutate(type = "Cases")

deaths_with_wave <- deaths_with_wave %>%
  select(date, wave, deaths_per_100k) %>%
  rename(value = deaths_per_100k) %>%
  mutate(type = "Deaths")

library(patchwork)



combined_data <- bind_rows(cases_with_wave, deaths_with_wave)

combined_data_filtered <- combined_data |>
  filter(!is.na(wave))

ggplot(combined_data_filtered, aes(x = date, y = value, color = wave)) +
  geom_line(alpha = 0.7, size = 1) +
  scale_color_brewer(palette = "Set1") +
  labs(
    title = "COVID-19 Cases and Mortality with Waves",
    x = "Date",
    y = "Count",
    color = "Wave"
  ) +
  facet_wrap(~type, scales = "free_y") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    strip.text = element_text(size = 12, face = "bold")
  )




```

Compute fatality ratio (deaths per 100 cases)

```{r}
# (deaths per 100 cases)
fatality_data <- combined_data_filtered |>
  group_by(wave, type) |>
  summarize(total = sum(value, na.rm = TRUE), .groups = "drop")

fatality_ratio_by_wave <- fatality_data |>
  pivot_wider(names_from = type, values_from = total) |>
  mutate(
    fatality_ratio = (Deaths / Cases) * 100  # Calculate fatality ratio as percentage
  ) |>
  select(wave, fatality_ratio) |> 
  arrange(wave) 

# Print the resulting table
print(fatality_ratio_by_wave)

ggplot(fatality_ratio_by_wave, aes(x = wave, y = fatality_ratio, group = 1)) +
  geom_line(color = "#FF5733", size = 1.2) +
  geom_point(color = "#FF5733", size = 3) +
  geom_text(aes(label = paste0(round(fatality_ratio, 2), "%")), 
            vjust = -1.2, color = "black", size = 4) +  
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.15))) +  
  labs(
    title = "Fatality Ratio (Deaths per 100 Cases) by Wave",
    x = "Wave",
    y = "Fatality Ratio (%)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14),
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12)
  )
```



Question4

population processing
```{r}

data_2010_2020 <- read_excel("nst-est2020int-pop.xlsx", skip = 3)

colnames(data_2010_2020 ) <- c("Geographic_Area", "Base_2010",  "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020")

data_2010_2020 <- data_2010_2020  |>
  filter(!is.na(Geographic_Area)) |>
  filter(str_starts(Geographic_Area, "\\.")) |> 
  mutate(Geographic_Area = str_replace(Geographic_Area, "^\\.", "")) |>
  select(-Base_2010) 

population_2010 <- data_2010_2020  |>
  pivot_longer(cols = starts_with("20"), 
               names_to = "year", 
               values_to = "population") |>
  rename(state_name = Geographic_Area) |>
                mutate(state = case_when(
                state_name == "District of Columbia" ~ "DC",
                state_name == "Puerto Rico" ~ "PR",
                TRUE ~ state.abb[match(state_name, state.name)]  # Use state.abb for other states
              ))


population_2010_filtered <- population_2010 |>
  mutate(state_name = reorder(state_name, population)) |>
  ggplot(aes(x = population, y = state_name, fill = year)) +
  geom_col() +
  coord_flip() +
  facet_wrap(~year, scales = "free_y") +
  labs(title = "State Populations",
       x = "Population",
       y = "State") +
  theme_minimal()  +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(population_2010_filtered)


```

```{r}

data <- read_csv("Weekly_Counts_of_Deaths_by_Jurisdiction_and_Age_20241220.csv")

extracted_data <- data %>%
  select(state = `State Abbreviation`, date = `Week Ending Date`, deaths = `Number of Deaths`)

extracted_data$date <- as.Date(extracted_data$date, format = "%m/%d/%Y")

extracted_data = extracted_data |>
  group_by(state,date) |>
  summarise(deaths = sum(deaths,na.rm=TRUE)) |>
  ungroup()

population_2010 <- population_2010 |>
  left_join(regions, by = "state_name")


death_2015 <- extracted_data |>
  left_join(population_2010, by = "state") |>            
  mutate(deaths_per_100k = (deaths / population) * 100000) |> 
  filter(!is.na(deaths_per_100k)) 


death_2015 <- death_2015 |>
  mutate(date_year = lubridate::year(as.Date(date))) |> 
  filter(date_year == year) 



print(death_2015)



  

```

prediction
```{r}

library(lubridate)
death_2015 <- death_2015 |>
  mutate(week = isoweek(date), year = year(date))

deaths <- deaths |>
  mutate(week = isoweek(date), year = year(date))


historical_data <- death_2015 |> filter(year < 2020)

print(historical_data)

population_model <- historical_data |>
  group_by(state) |>
  do(model = lm(deaths_per_100k ~ poly(week, degree = 2) + year, data = .))

future_weeks <- expand.grid(
  state = unique(historical_data$state),
  year = 2020:2024,
  week = 1:52
)

predicted_data <- population_model |>
  rowwise() |>
  do(data.frame(
    state = .$state,
    year = future_weeks$year,
    week = future_weeks$week,
    predicted_deaths_per_100k = predict(.$model, newdata = future_weeks)
  ))


predicted_data <- predicted_data |> distinct()

print(predicted_data)

extracted_data_2020 = extracted_data  |> 
  rename(real_death=deaths) |> 
  mutate(week = isoweek(date), year = year(date)) |> 
  filter(year>2019) |> select(-date)

deaths = deaths |>
  left_join(extracted_data_2020, by = c("week","year","state")) |>
  mutate(real_deaths_per_100k = (real_death / population) * 100000) |> 
  filter(!is.na(real_deaths_per_100k)) 


merged_death_2020_after_prediction <- deaths |>
  left_join(predicted_data, by = c("state", "year", "week"))

merged_death_2020_after_prediction <- merged_death_2020_after_prediction |>
  mutate(excess_mortality = real_deaths_per_100k - predicted_deaths_per_100k)


ggplot(merged_death_2020_after_prediction, aes(x = week, y = excess_mortality, color = state_name, group = state_name)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  labs(
    title = "Excess Mortality Trend by State",
    x = "Date",
    y = "Excess Mortality",
    color = "State"
  ) +
  theme_minimal() +
  theme(
  )

```

confidence
```{r}
correlation <- cor(merged_death_2020_after_prediction$excess_mortality, merged_death_2020_after_prediction$deaths_per_100k, method = "pearson")



ggplot(merged_death_2020_after_prediction, aes(x = deaths_per_100k, y = excess_mortality)) +
  geom_point() +
  geom_smooth(method = "lm", se = TRUE, color = "blue") +
  labs(title = "Relationship between COVID Deaths and Excess Mortality",
       x = "COVID Deaths",
       y = "Excess Mortality")


model <- lm(excess_mortality ~ deaths_per_100k, data = merged_death_2020_after_prediction)


summary(model)
print(paste("Pearson correlation coefficient:", correlation))

coef(model)  
confint(model)  


```
Chi-square Test: for each wave
H0: the excess mortality follows the covid-19 death distributions.
```{r}
library(dplyr)

merged_death_2020_after_prediction <- merged_death_2020_after_prediction %>%
  mutate(wave = case_when(
    between(date, wave_definitions$start_date[1], wave_definitions$end_date[1]) ~ "Wave1",
    between(date, wave_definitions$start_date[2], wave_definitions$end_date[2]) ~ "Wave2",
    between(date, wave_definitions$start_date[3], wave_definitions$end_date[3]) ~ "Wave3",
    between(date, wave_definitions$start_date[4], wave_definitions$end_date[4]) ~ "Wave4",
    between(date, wave_definitions$start_date[5], wave_definitions$end_date[5]) ~ "Wave5",
    between(date, wave_definitions$start_date[6], wave_definitions$end_date[6]) ~ "Wave6",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(wave))

filtered_data <- merged_death_2020_after_prediction %>%
  filter(excess_mortality > 0 & deaths_per_100k > 0)

grouped_data <- filtered_data %>%
  group_by(state, wave) %>%
  summarize(
    total_excess_mortality = sum(excess_mortality),
    total_covid19_deaths = sum(deaths_per_100k),
    .groups = "drop"
  )


chi_square_results <- grouped_data %>%
  group_by(wave) %>%
  group_split() %>%
  map_df(~ {
    wave_data <- .
    
    contingency_table <- wave_data %>%
      select(total_excess_mortality, total_covid19_deaths) %>%
      as.matrix()

    if (nrow(contingency_table) > 1 && ncol(contingency_table) == 2) {
      chi_test <- chisq.test(contingency_table)
      
      data.frame(
        wave = unique(wave_data$wave),
        chi_square_statistic = chi_test$statistic,
        p_value = chi_test$p.value,
        degrees_of_freedom = chi_test$parameter
      )
    } else {
      data.frame(
        wave = unique(wave_data$wave),
        chi_square_statistic = NA,
        p_value = NA,
        degrees_of_freedom = NA
      )
    }
  })


print(chi_square_results)
```




Question5
```{r}
library(ggplot2)
library(dplyr)



for (i in regions2) {
  region_data <- merged_death_2020_after_prediction |> filter(major_region == i)
  
  p <- ggplot(region_data, aes(x = date, y = excess_mortality, color = state_name)) +
    geom_line(size = 1, alpha = 0.8) +
    labs(
      title = paste("excess_mortality per 100,000 in", i, "(2020-2024)"),
      x = "Date",
      y = "Deaths per 100,000",
      color = "State"
    ) +
    theme_minimal() +
    scale_x_date(date_breaks = "6 months", date_labels = "%b %Y")
  
  print(p)
}
```


```{r}
wave_definitions <- tibble(
  wave = c("Wave1", "Wave2", "Wave3", "Wave4", "Wave5", "Wave6"),
  start_date = as.Date(c("2020-03-15", "2020-06-15", "2020-11-15", "2021-07-15", "2021-12-01", "2022-05-15")),
  end_date = as.Date(c("2020-06-01", "2020-10-01", "2021-04-15", "2021-10-30", "2022-04-01", "2022-10-01"))
)

merged_death_2020_after_prediction <- merged_death_2020_after_prediction %>%
  mutate(wave = case_when(
    between(date, wave_definitions$start_date[1], wave_definitions$end_date[1]) ~ "Wave1",
    between(date, wave_definitions$start_date[2], wave_definitions$end_date[2]) ~ "Wave2",
    between(date, wave_definitions$start_date[3], wave_definitions$end_date[3]) ~ "Wave3",
    between(date, wave_definitions$start_date[4], wave_definitions$end_date[4]) ~ "Wave4",
    between(date, wave_definitions$start_date[5], wave_definitions$end_date[5]) ~ "Wave5",
    between(date, wave_definitions$start_date[6], wave_definitions$end_date[6]) ~ "Wave6",
    TRUE ~ NA_character_
  )) %>%
  # Remove rows that have no wave assigned
  filter(!is.na(wave))

# Identify the top 5 and bottom 5 states for each wave by excess mortality
top_and_bottom_5_excess <- merged_death_2020_after_prediction %>%
  group_by(wave, state_name) %>%
  summarize(avg_excess_mortality = mean(excess_mortality, na.rm = TRUE), .groups = "drop") %>%
  group_by(wave) %>%
  mutate(
    rank = rank(-avg_excess_mortality),
    rank_category = case_when(
      rank <= 5 ~ "Worst 5 (Highest)",
      rank > n() - 5 ~ "Best 5 (Lowest)",
      TRUE ~ NA_character_
    )
  ) %>%
  filter(!is.na(rank_category))

# Plot the top and bottom 5 states by excess mortality
ggplot(top_and_bottom_5_excess, aes(x = reorder_within(state_name, avg_excess_mortality, wave), 
                                    y = avg_excess_mortality, 
                                    fill = rank_category)) +
  geom_col() +
  facet_wrap(~wave, scales = "free") +
  scale_x_reordered() +
  scale_fill_manual(
    values = c("Worst 5 (Highest)" = "#FF69B4", "Best 5 (Lowest)" = "blue"),
    name = "Category"
  ) +
  labs(
    title = "Best and Worst 5 States by Average Excess Mortality During Each Wave",
    x = "State",
    y = "Average Excess Mortality (per 100,000)"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text.y = element_text(size = 10),
    legend.position = "bottom",
    strip.text = element_text(size = 10, face = "bold"),
    plot.title = element_text(size = 12, face = "bold", hjust = 0.5)
  )


```