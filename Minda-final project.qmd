---
title: Final_Project
date: 2024-10-04
format: pdf
---


Population Data Processing
```{r}
# Load required libraries
library(readxl)
library(tidyr)
library(dplyr)
library(httr2)
library(tidyverse)
library(janitor)
library(lubridate)
library(jsonlite)


file_path <- "NST-EST2024-POP.xlsx"

data <- read_excel(file_path, sheet = "NST-EST2024-POP", skip = 3)

colnames(data) <- c("Geographic_Area", "Base_2020", "2020", "2021", "2022", "2023", "2024")

data <- data |>
  filter(!is.na(Geographic_Area)) |>
  filter(str_starts(Geographic_Area, "\\.")) |> 
  mutate(Geographic_Area = str_replace(Geographic_Area, "^\\.", "")) |>
  select(-Base_2020) # Drop the Base_2020 column

population <- data |>
  pivot_longer(cols = starts_with("20"), 
               names_to = "year", 
               values_to = "population") |>
  rename(state_name = Geographic_Area) |>
                mutate(state = case_when(
                state_name == "District of Columbia" ~ "DC",
                state_name == "Puerto Rico" ~ "PR",
                TRUE ~ state.abb[match(state_name, state.name)]  # Use state.abb for other states
              ))


population_filtered <- population |>
  mutate(state_name = reorder(state_name, population)) |>
  ggplot(aes(x = population, y = state_name, fill = year)) +
  geom_col() +
  coord_flip() +
  facet_wrap(~year, scales = "free_y") +
  labs(title = "State Populations for 2021 and 2022",
       x = "Population",
       y = "State") +
  theme_minimal()  +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(population_filtered)


```

Population Processing 

```{r}

url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url, simplifyDataFrame = FALSE)
regions <- map_df(regions, function(x) 
  data.frame(region=x$region, region_name = x$region_name, state_name = x$states))
regions$region_name <- gsub("New York and New Jersey, Puerto Rico, Virgin Islands", "NY & NJ & PR & VI",regions$region_name)

population <- population |>
  left_join(regions, by = "state_name")

print(population) 




```


case processing
```{r}

api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
response <- request(api) |> 
  req_url_query(`$limit` = 10000000000) |>
  req_perform()                       

cases_raw <- response |> 
  resp_body_json(simplifyVector = TRUE) |> 
  as_tibble()

print(cases_raw)

cases_clean <- cases_raw |> 
  select(state, end_date, new_cases) |>             
  rename(date = end_date, cases = new_cases) |>     
  mutate(
    cases = as.numeric(cases),                     
    date = as.Date(date)                         
  )

death_clean <- cases_raw |> 
  select(state, end_date, new_deaths) |>             
  rename(date = end_date, deaths = new_deaths) |>     
  mutate(
    deaths = as.numeric(deaths),                     
    date = as.Date(date)                         
  )


print(cases_clean)
print(death_clean)




```


Join
```{r}

cases <- cases_clean |>
  left_join(population, by = "state") |>            
  mutate(cases_per_100k = (cases / population) * 100000) |> 
  filter(!is.na(cases_per_100k))   

death <- death_clean |>
  left_join(population, by = "state") |>            
  mutate(deaths_per_100k = (deaths / population) * 100000) |> 
  filter(!is.na(deaths_per_100k)) 

ggplot(cases, aes(x = date, y = cases_per_100k, color = state_name)) +
  geom_line() +                                           
  facet_wrap(~ region_name, scales = "free_y") +         
  labs(
    x = "Date",
    y = "Cases per 100,000",
    color = "State"
  ) +
  theme_minimal() +
    theme(
    legend.position = "bottom",                          
    legend.key.size = unit(0.2, "cm"),                    
    legend.text = element_text(size = 7),                
    axis.text.x = element_text(angle = 45, hjust = 1)     
  )

```
Wave
```{r}
library(ggplot2)
library(dplyr)
library(patchwork)

deaths <- death |> mutate(deaths = ifelse(deaths < 0, NA, deaths))
cases <- cases |> mutate(date = as.Date(date))
deaths <- deaths |> mutate(date = as.Date(date))


# Identity wave period
results <- deaths |> 
  mutate(period = case_when(
    date >= as.Date("2020-03-15") & date <= as.Date("2020-06-01") ~ "Wave1",
    date >= as.Date("2020-07-01") & date <= as.Date("2020-10-01") ~ "Wave2",
    date >= as.Date("2020-12-01") & date <= as.Date("2021-04-30") ~ "Wave3",
    date >= as.Date("2021-08-15") & date <= as.Date("2021-10-30") ~ "Wave4",
    date >= as.Date("2021-12-01") & date <= as.Date("2022-04-01") ~ "Wave5"
  )) |> 
  filter(!is.na(period)) |> 
  group_by(period) |> 
  summarise(
    peak_value = max(deaths, na.rm = TRUE),
    peak_date = date[which.max(deaths)]
  )

print(results)

```

```{r}
library(ggplot2)
library(dplyr)
library(patchwork)

cases_plot <- ggplot(cases, aes(x = date, y = cases)) +
  geom_line(color = "blue", size = 1) +
  labs(
    title = "COVID-19 Cases Trend (2020-2024)",
    x = "Date",
    y = "Total COVID-19 Cases"
  ) +
  theme_minimal() + 
  theme(plot.title = element_text(hjust = 0.5))

deaths_plot <- ggplot(deaths, aes(x = date, y = deaths)) +
  geom_line(color = "#FF69B4", size = 1) +
  labs(
    title = "COVID-19 Mortality Trend (2020-2024)",
    x = "Date",
    y = "Total COVID-19 Mortality"
  ) +
  theme_minimal() + 
  theme(plot.title = element_text(hjust = 0.5))

# Define time periods for waves
time_periods <- data.frame(
  period = c("Wave1", "Wave2", "Wave3", "Wave4", "Wave5"),
  start_date = as.Date(c("2020-03-15", "2020-07-01", "2020-12-01", "2021-08-15", "2021-12-01")),
  end_date = as.Date(c("2020-06-01", "2020-10-01", "2021-04-30", "2021-10-30", "2022-04-01"))
)

# Add dashed rectangules
deaths_plot <- deaths_plot +
  geom_rect(
    data = time_periods,
    aes(
      xmin = start_date,
      xmax = end_date,
      ymin = 0,
      ymax = 4000,
      color = period
    ),
    fill = NA,
    size = 0.9,
    inherit.aes = FALSE
  ) +
  scale_color_manual(
    values = c(
      "Wave1" = "#87CEEB",
      "Wave2" = "#ff7f0e", 
      "Wave3" = "#2ca02c",
      "Wave4" = "#17becf",
      "Wave5" = "#FFD700"
    ),
    name = "Time Periods"
  ) +
  theme(
    legend.title = element_text(size = 12, face = "plain"),  
    legend.text = element_text(size = 10),                
    legend.key.size = unit(0.8, "cm"),           
    legend.spacing.y = unit(0.3, "cm"),                 
  )

combined_plot <- cases_plot / deaths_plot
print(combined_plot)

anomalies <- deaths %>% filter(deaths < 0)
# print(anomalies)


```



Question2

```{r}


library(ggplot2)
library(dplyr)

deaths <- deaths |> mutate(date = as.Date(date))

deaths <- deaths |> mutate(deaths_per_100k = ifelse(deaths_per_100k < 0, 0, deaths_per_100k))

deaths <- deaths |>
  mutate(
    major_region = case_when(
      region_name %in% c("New England", "Mid-Atlantic", "NY & NJ & PR & VI") ~ "Northeast",
      region_name %in% c("Southeast", "South Central") ~ "South",
      region_name %in% c("Pacific", "Pacific Northwest", "Mountain States") ~ "West",
      region_name %in% c("Midwest", "Central Plains") ~ "Midwest",
      TRUE ~ "Other"
    )
  )

regions <- c("Northeast", "South", "West", "Midwest")

for (i in regions) {
  region_data <- deaths |> filter(major_region == i)
  
  p <- ggplot(region_data, aes(x = date, y = deaths_per_100k, color = state_name)) +
    geom_line(size = 1, alpha = 0.8) +
    labs(
      title = paste("Deaths per 100,000 in", i, "(2020-2024)"),
      x = "Date",
      y = "Deaths per 100,000",
      color = "State"
    ) +
    theme_minimal() +
    scale_x_date(date_breaks = "6 months", date_labels = "%b %Y")
  
  print(p)
}



```


Question3

```{r}
library(dplyr)
library(lubridate)

wave_definitions <- tibble(
  wave = c("Wave1", "Wave2", "Wave3", "Wave4", "Wave5"),
  start_date = as.Date(c("2020-03-15", "2020-07-01", "2020-12-01", "2021-08-15", "2021-12-01")),
  end_date = as.Date(c("2020-06-01", "2020-10-01", "2021-04-30", "2021-10-30", "2022-04-01"))
)

add_wave <- function(df, wave_df) {
  df %>%
    rowwise() %>%
    mutate(wave = {
      inds <- which(date >= wave_df$start_date & date <= wave_df$end_date)
      if (length(inds) == 1) {
        wave_df$wave[inds]
      } else {
        NA_character_  
      }
    }) %>%
    ungroup()
}

cases_with_wave <- add_wave(cases, wave_definitions)
deaths_with_wave <- add_wave(deaths, wave_definitions)


cases_with_wave <- cases_with_wave %>%
  select(date, wave, cases_per_100k) %>%
  rename(value = cases_per_100k) %>%
  mutate(type = "Cases")

deaths_with_wave <- deaths_with_wave %>%
  select(date, wave, deaths_per_100k) %>%
  rename(value = deaths_per_100k) %>%
  mutate(type = "Deaths")

library(patchwork)

combined_data <- bind_rows(cases_with_wave, deaths_with_wave)

# Remove rows with NA in the wave column before plotting
combined_data_filtered <- combined_data |>
  filter(!is.na(wave))

# Create the plot
ggplot(combined_data_filtered, aes(x = date, y = value, color = wave)) +
  geom_line(alpha = 0.7, size = 1) +
  scale_color_brewer(palette = "Set1") +
  labs(
    title = "COVID-19 Cases and Mortality with Waves",
    x = "Date",
    y = "Count",
    color = "Wave"
  ) +
  facet_wrap(~type, scales = "free_y") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    strip.text = element_text(size = 12, face = "bold")
  )

```


Question4

population processing
```{r}

data_2010_2020 <- read_excel(file_path, sheet = "nst-est2020int-pop", skip = 3)

colnames(data) <- c("Geographic_Area", "Base_2010", "2010", "2011", "2012", "2013", "2024")

data <- data |>
  filter(!is.na(Geographic_Area)) |>
  filter(str_starts(Geographic_Area, "\\.")) |> 
  mutate(Geographic_Area = str_replace(Geographic_Area, "^\\.", "")) |>
  select(-Base_2020) # Drop the Base_2020 column

population <- data |>
  pivot_longer(cols = starts_with("20"), 
               names_to = "year", 
               values_to = "population") |>
  rename(state_name = Geographic_Area) |>
                mutate(state = case_when(
                state_name == "District of Columbia" ~ "DC",
                state_name == "Puerto Rico" ~ "PR",
                TRUE ~ state.abb[match(state_name, state.name)]  # Use state.abb for other states
              ))


population_filtered <- population |>
  mutate(state_name = reorder(state_name, population)) |>
  ggplot(aes(x = population, y = state_name, fill = year)) +
  geom_col() +
  coord_flip() +
  facet_wrap(~year, scales = "free_y") +
  labs(title = "State Populations",
       x = "Population",
       y = "State") +
  theme_minimal()  +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(population_filtered)


```

